upstream client { # sets up definition of an upstream called client
  server client:3000;  # it refers to a server hosted at 'client:3000' (telling nginx that the location of this upstream is at 'client:3000')
}

# upstream server {
#   server server:5000;
# }

# may be confusing: in docker-compose, we refer to express api as 'server'(the name of the service as we defined it). So we change our terminology for our backend service
# 'server' to 'api' (name change, also in docker-compose file)

upstream api {
  server api:5000;
}

server {
  listen 80;

  location / {  
    # if anyone goes to (a request comes to) '/', set up a proxy and pass through the request to the 'client upstream'
    proxy_pass http://client;  # send to this 'client' upstream 
  }

  location /sockjs-node {
    proxy_pass http://client;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }

  location /api {
    # when a req comes from the browser with a route of '/api', after it goes through nginx, it trims off that '/api' part of the request path (we configure nginx to do that)
    rewrite /api/(.*) /$1 break;   # rewrite directive. Apply a regex to find match, and if you find a match, take off the '/api' and leave it as '/$1'(a reference to whatever text that was matched by '(.*)' (substitute) )  'break': do not apply any other rewrite rules (to keep from going thru continuous rules, as nginx writes URL then tries to match it to a new route, with the new rewritten URL)
    proxy_pass http://api;
  }
}